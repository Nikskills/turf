// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  balance Float
  Sessions ConsumptionSession[]
  Consumptions Consumption[]
  Transactions StockTransaction[]
  sessions Session[]
  settlementsAsDebtor   Settlement[] @relation("Debtor")
  settlementsAsCreditor Settlement[] @relation("Creditor")
}


model ConsumptionSession {
  consumptionSessionId String @id @default(uuid())
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  description String
  date DateTime
  consumption Consumption[]
}

model Consumption {
  consumptionId String @id @default(uuid())
  session ConsumptionSession @relation(fields: [sessionId], references: [consumptionSessionId], onDelete: Cascade)
  sessionId String
  drinker User @relation(fields: [consumerId], references: [id])
  consumerId String
  quantity Int
}

model StockTransaction {
  transactionId String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity Int
  cost Float? // Optional: only set for purchases
  purchaseDate DateTime? // Optional: only set for purchases
  transactionType Type
  transactionDate DateTime 
}

enum Type {
  CONSUMPTION
  PURCHASE
  // Add more transaction types as needed
}
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Settlement {
  id          String   @id @default(uuid())
  debtorId    String  
  creditorId  String
  amount      Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  debtor User @relation("Debtor", references: [id], fields: [debtorId], onDelete: Cascade)
  creditor User @relation("Creditor", references: [id], fields: [creditorId], onDelete: Cascade)
}